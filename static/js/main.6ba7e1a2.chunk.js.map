{"version":3,"sources":["Colors.js","Utils.js","RNG.js","components/Interval.js","components/Constants.js","components/Models.js","components/WidgetButton.jsx","components/NodeLegend.js","components/Plot.js","components/Synth.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Colors","hexString","c","Color","red","green","blue","r","g","b","h","s","l","hsl","c1","c2","fraction","color","alpha","length","min","Math","max","NaN","rgb","a","rep","__helperRep","toString","ratio","__fromHelperRep","whiten","Utils","condition","message","console","log","alert","colors","width","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","height","buffer","Uint8ClampedArray","y","genSize","leftBuffer","floor","rightBuffer","x","pos","canvas","document","createElement","ctx","getContext","idata","createImageData","data","set","putImageData","toDataURL","array1","array2","i","o1","o2","eq","Array","isArray","arraysEqual","RNG","seed","Object","classCallCheck","this","random","m","lastX","createClass","key","num1","num2","int1","int2","Interval","props","_this","possibleConstructorReturn","getPrototypeOf","call","initializeFromProps","nextProps","nextContext","fromConstructor","state","setState","interval","clearInterval","setInterval","callback","milliseconds","Component","defaultProps","Constants","SUSCEPTIBLE_COLOR","EXPOSED_COLOR","INFECTED_COLOR","ISOLATING_COLOR","REMOVED_COLOR","DEAD_COLOR","QUARENTINE_COLOR","QUARENTINE_STROKE","SUSCEPTIBLE","QUARENTINE","EXPOSED","INFECTED","REMOVED","DEAD","GridNode","rng","nextState","daysInState","linked","mediaOutlet","specialDegree","dead","isolating","quarentine","_setState","neighbor","transProb","isSusceptible","setNextState","chanceOfIsolationAfterSymptoms","overHospitalCapacity","daysIncubating","daysSymptomatic","allowDeaths","deathRate","maybeIsolate","isExposed","setInfected","isInfected","setDead","setRemoved","StyledButton","withStyles","root","background","label","textTransform","Button","HighlightedButton","WidgetButton","sty","margin","size","maxWidth","maxHeight","minWidth","minHeight","highlighted","react_default","variant","onClick","e","preventDefault","style","children","React","PureComponent","NodeLegend","type","marginBottom","border","backgroundColor","display","Plot","canvasRef","createRef","showDead","showInfected","showRecovered","componentWillReceiveProps","updateWindowDimensions","bind","assertThisInitialized","documentElement","clientWidth","redraw","updateMaxValues","maxValue","serieses","push","infectedPerDay","recoveredPerDay","deadPerDay","hospitalCapacity","capacityPerDay","_i","v","population","maxDay","current","window","addEventListener","removeEventListener","context","fillStyle","fillRect","setLineDash","lineWidth","zerosPath","infectedPath","recoveredPath","deadPath","topPath","capacityPath","day","infected","recovered","capacity","drawPath","showHospitalCapacity","xcoord","ycoord","strokeStyle","drawLine","fwdpath","backpath","beginPath","moveTo","lineTo","stroke","fill","series","day1","day2","value1","value2","x1","x2","y1","y2","forceUpdate","infectedPercent","round","recoveredPercent","deadPercent","isNaN","NodeLegend_NodeLegend","showDeaths","widthToUse","className","ref","Synth","NumberOfOscillators","oscillators","index","osc","Oscillator","oscillatorsGain","gain","Gain","masterGain","map","connect","Master","disconnect","forEach","start","stop","freq","glideTime","frequency","exponentialRampToValueAtTime","oscTypeList","oscGainList","Grid","previousSimulationParams","previousDrawingParams","previousInteractionsParams","onTick","onEnter","onLeave","frequencies","numberOfNodeStates","sort","oscillatorType","idealWidth","gridCols","nodeSize","gridWidth","randomSeed","numActiveNodes","playing","visible","decreaseInEncountersAfterSymptoms","hospitalCapacityPct","immunityFraction","longDistaceNetworkActive","addLinkedNodes","maxIterations","personHours","transmissionProbability","travelRadius","centerNodeNeighborsToDisplay","drawNodeOutlines","hospitalCapacitySliderHighlighted","speed","simulateStep","generate","force","currentSimulationParams","gridRows","nug","nRows","nCols","grid","node","setInQuarentine","linkedNodes","Set","j","setSusceptible","add","addCities","cityCenters","center","cr","cc","distance","sqrt","pow","centerR","centerC","setExposed","dr","dc","abs","startDay","showInteractions","isCenterNode","canInfectOthers","maybeInfect","actualInfectedNodes","getNextState","showChanceOfIsolationAfterSymptomsSlider","overCapacity","endDay","actualDeadNodes","actualRecoveredNodes","OscBlockState","rowBlock","colBlock","blockState","toConsumableArray","rowInBlock","colInBlock","updateOscillators","resetPlotVariables","neighbors","getNeighbors","tryToInfect","radius","nr","nc","blocks","oscType","oscFreqs","oscGains","oscBlock","indexOfMaxValue","indexOf","apply","meanFreq","setOscType","setFrequency","setOscGain","isIsolating","n","chooseRandomNeighbor","currentDrawingParams","showInteractionsParams","interactionsParamsChanged","drawCell","inInitialPosition","centerNode","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","drawInteraction","r1","r2","w","highlight","isRemoved","isDead","isInQuarentine","assert","intensity","hex","blend","makeHex","strokeRect","left","wid","top","hei","name","onChange","step","renderPercentage","valueStr","Slider_default","classes","container","thumbIconWrapper","_this2","showAll","showAllControls","transmissionProbabilitySlider","showTransmissionProbabilitySlider","renderSlider","maxTransmissionRate","immunityFractionSlider","showImmunityFractionSlider","sliderName","immunitySliderName","showHospitalCapacitySlider","travelRadiusSlider","showTravelRadiusSlider","showPersonHoursSlider","showDaysPerStateControls","chanceOfIsolationAfterSymptomsSlider","decreaseInEncountersAfterSymptomsSlider","showDecreaseInEncountersAfterSymptomsSlider","showDeathRateSlider","speedSlider","showSpeedControls","WidgetButton_WidgetButton","playbackControls","showPlaybackControls","newNetworkButton","text","fontSize","togglePlaybackButton","togglePlayback","stepButton","showProTip","marginTop","intervalMillis","highlightedSlider","plot","showAliveFraction","Plot_Plot","es","scrollableAncestor","Interval_Interval","arr","_ref","percent","NEIGHBOR_CLASSES","showDegreeSlider","showSimulationButtons","App","spoilersVisible","Grid_Grid","renderMainPost","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ba7e1a2.chunk.js","sourcesContent":["import Color from 'color'\r\n\r\nexport default class Colors {\r\n  static makeHex(hexString: string): any {\r\n    let c = Color(hexString);\r\n    return [c.red(), c.green(), c.blue()];\r\n  }\r\n\r\n  static makeRGB(r: number, g: number, b: number): any {\r\n    // return Color.rgb(r, g, b);\r\n    return [r, g, b];\r\n  }\r\n\r\n  static makeHSL(h: number, s: number, l: number): any {\r\n    // return Color.hsl(h, s, l);\r\n    let c = Color.hsl(h, s, l);\r\n    return [c.red(), c.green(), c.blue()];\r\n  }\r\n\r\n  static blend(c1: any, c2: any, fraction: number): any {\r\n    let r = (c2[0] - c1[0]) * fraction + c1[0];\r\n    let g = (c2[1] - c1[1]) * fraction + c1[1];\r\n    let b = (c2[2] - c1[2]) * fraction + c1[2];\r\n    return [r, g, b]\r\n  }\r\n\r\n  static withAlpha(color: any, alpha: number): any {\r\n    return [color[0], color[1], color[2], alpha]\r\n  }\r\n\r\n  static r(color: any): number {\r\n    // return color.red();\r\n    return color[0];\r\n  }\r\n\r\n  static g(color: any): number {\r\n    // return color.green();\r\n    return color[1];\r\n  }\r\n\r\n  static b(color: any): number {\r\n    // return color.blue();\r\n    return color[2];\r\n  }\r\n\r\n  static a(color: any): number {\r\n    if (color.length === 4) {\r\n      return color[3];\r\n    } else {\r\n      return 255;\r\n    }\r\n  }\r\n\r\n  static hue(color: any): number {\r\n    let r = color[0] / 255,\r\n        g = color[1] / 255,\r\n        b = color[2] / 255,\r\n        min = Math.min(r, g, b),\r\n        max = Math.max(r, g, b),\r\n        h = NaN,\r\n        s = max - min,\r\n        l = (max + min) / 2;\r\n    if (s) {\r\n      if (r === max) h = (g - b) / s + (g < b) * 6;\r\n      else if (g === max) h = (b - r) / s + 2;\r\n      else h = (r - g) / s + 4;\r\n      s /= l < 0.5 ? max + min : 2 - max - min;\r\n      h *= 60;\r\n    } else {\r\n      s = l > 0 && l < 1 ? 0 : h;\r\n    }\r\n    return h;\r\n  }\r\n\r\n  static __helperRep(color: any): Color {\r\n    return Color.rgb(Colors.r(color), Colors.g(color), Colors.b(color), Colors.a(color));\r\n  }\r\n\r\n  static __fromHelperRep(rep: Color): any {\r\n    return [rep.red(), rep.green(), rep.blue()]\r\n  }\r\n\r\n  static hex(color: any): string {\r\n    return Colors.__helperRep(color).toString();\r\n  }\r\n\r\n  static opacity(color: any): number {\r\n    let alpha = Colors.a(color);\r\n    return alpha / 255.0;\r\n  }\r\n\r\n  static lighten(color: any, ratio: number): any {\r\n    return Colors.__fromHelperRep(Colors.__helperRep(color).whiten(ratio))\r\n  }\r\n}","import Colors from \"./Colors.js\";\r\n\r\nexport default class Utils {\r\n\r\n  static assert(condition: boolean, message: string) {\r\n    if (!condition) {\r\n      console.log('ACK!', message);\r\n      alert('ACK! ' + message)\r\n    }\r\n  }\r\n\r\n  static makeImageUri(colors: any[][]): string {\r\n    let width = -1;\r\n    for (let row of colors) {\r\n      if (row.length > width) {\r\n        width = row.length;\r\n      }\r\n    }\r\n    let height = colors.length;\r\n    let buffer = new Uint8ClampedArray(width * height * 4); // have enough bytes\r\n\r\n    for (let y = 0; y < height; y++) {\r\n      let genSize = colors[y].length;\r\n      let leftBuffer = Math.floor((width - genSize)/2);\r\n      let rightBuffer = width - genSize - leftBuffer;\r\n      for (let x = 0; x < genSize; x++) {\r\n          let c = colors[y][x];\r\n          let pos = (y * width + leftBuffer + x) * 4; // position in buffer based on x and y\r\n          buffer[pos  ] = Colors.r(c);   // some R value [0, 255]\r\n          buffer[pos+1] = Colors.g(c);   // some G value\r\n          buffer[pos+2] = Colors.b(c);   // some B value\r\n          buffer[pos+3] = Colors.a(c);   // set alpha channel\r\n      }\r\n      for (let x = 0; x < leftBuffer; x++) {\r\n        let pos = (y * width + x) * 4;\r\n        buffer[pos]   = 255;\r\n        buffer[pos+1] = 255;\r\n        buffer[pos+2] = 255;\r\n        buffer[pos+3] = 255;\r\n      }\r\n      for (let x = genSize + rightBuffer; x < width; x++) {\r\n        let pos = (y * width + x) * 4;\r\n        buffer[pos]   = 255;\r\n        buffer[pos+1] = 255;\r\n        buffer[pos+2] = 255;\r\n        buffer[pos+3] = 255;\r\n      }\r\n    }\r\n\r\n    // create off-screen canvas element\r\n    let canvas = document.createElement('canvas'),\r\n        ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    // create imageData object\r\n    let idata = ctx.createImageData(width, height);\r\n\r\n    // set our buffer as source\r\n    idata.data.set(buffer);\r\n\r\n    // update canvas with new data\r\n    ctx.putImageData(idata, 0, 0);\r\n\r\n    return canvas.toDataURL()\r\n  }\r\n\r\n  static arraysEqual(array1: any[], array2: any[]): boolean {\r\n    if (array1.length !== array2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < array1.length; i++) {\r\n      let o1 = array1[i];\r\n      let o2 = array2[i];\r\n      let eq = (o1 === o2);\r\n      if (Array.isArray(o1) && Array.isArray(o2)) {\r\n        eq = Utils.arraysEqual(o1, o2);\r\n      }\r\n\r\n      if (!eq) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}","export class RNG {\r\n  // From http://onehourhacks-gamespot.blogspot.com/2013/02/howto-make-quick-and-dirty-pseudorandom.html\r\n  static m = 2147483648;\r\n  static a = 214013;\r\n  static c = 2531011;\r\n\r\n  lastX: number;\r\n\r\n  constructor(seed: number|null) {\r\n    if (seed === null || seed === undefined) {\r\n      seed = Math.floor(Math.random() * RNG.m);\r\n    }\r\n    this.lastX = Math.floor(seed);\r\n  }\r\n\r\n  random(): number {\r\n    this.lastX = (RNG.a * this.lastX + RNG.c) % RNG.m;\r\n    // return Math.random();\r\n    return this.lastX / RNG.m;\r\n  }\r\n\r\n  randBetween(num1: number, num2: number): number {\r\n    return this.random() * (num2-num1) + num1\r\n  }\r\n\r\n  // inclusive on both sides\r\n  randIntBetween(int1: number, int2: number): number {\r\n    let r = this.random() * (int2-int1+1)\r\n    return Math.floor(r) + int1\r\n  }\r\n\r\n}","import {Component} from \"react\";\r\n\r\ntype Props = {\r\n  milliseconds: number,\r\n  callback: () => any,\r\n}\r\n\r\ntype State = {\r\n  // nothing\r\n}\r\n\r\nexport default class Interval extends Component<Props, State> {\r\n  // Set default props\r\n  static defaultProps = {\r\n    // nothing for now\r\n  };\r\n\r\n  interval: any;  // timer for animations\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.initializeFromProps(this.props, true);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: Props, nextContext: any): void {\r\n    this.initializeFromProps(nextProps, false);\r\n  }\r\n\r\n  initializeFromProps(props: Props, fromConstructor: boolean) {\r\n    let state = {\r\n      // nothing yet\r\n    };\r\n    if (fromConstructor) {\r\n      this.state = state;\r\n    } else {\r\n      this.setState(state);\r\n    }\r\n\r\n    if (this.interval !== null && this.interval !== undefined) {\r\n      clearInterval(this.interval);\r\n    }\r\n    this.interval = setInterval(props.callback, props.milliseconds);\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}","\r\nexport default class Constants {\r\n  static SUSCEPTIBLE_COLOR = '#EEE';\r\n  static EXPOSED_COLOR = '#ffdde2';\r\n  static INFECTED_COLOR = '#F44';\r\n  static ISOLATING_COLOR = '#8094ff';\r\n  static REMOVED_COLOR = '#999';\r\n  static DEAD_COLOR = '#000';\r\n  static QUARENTINE_COLOR = '#e1e7f0'\r\n  static QUARENTINE_STROKE = '#a3aab5'\r\n\r\n  static SUSCEPTIBLE = 0;\r\n  static QUARENTINE = 1;\r\n  static EXPOSED = 2;\r\n  static INFECTED = 3;\r\n  static REMOVED = 4;\r\n  static DEAD = 5;\r\n\r\n}","import {RNG} from \"../RNG\";\r\nimport Constants from \"./Constants\";\r\n\r\n\r\nexport class GridNode {\r\n  r: number;\r\n  c: number;\r\n\r\n  state: number;\r\n  nextState: number;\r\n  daysInState: number;\r\n\r\n  linked: boolean;\r\n  mediaOutlet: boolean;\r\n  specialDegree: number|null;\r\n  dead: boolean;\r\n\r\n  isolating: boolean;\r\n\r\n  rng: RNG;\r\n\r\n  constructor(rng: RNG, r: number, c: number) {\r\n    this.r = r;\r\n    this.c = c;\r\n\r\n    this.state = Constants.SUSCEPTIBLE;\r\n    this.nextState = Constants.SUSCEPTIBLE;\r\n    this.daysInState = 0;\r\n\r\n    this.linked = false;\r\n    this.mediaOutlet = false;\r\n    this.specialDegree = null;\r\n    this.dead = false;\r\n\r\n    this.isolating = false;\r\n\r\n    this.quarentine = false;\r\n\r\n    this.rng = rng;\r\n  }\r\n\r\n  getState(): number {\r\n    return this.state;\r\n  }\r\n\r\n  getNextState(): number {\r\n    return this.nextState;\r\n  }\r\n\r\n  isSusceptible(): boolean {\r\n    return this.state === Constants.SUSCEPTIBLE;\r\n  }\r\n\r\n  isExposed(): boolean {\r\n    return this.state === Constants.EXPOSED;\r\n  }\r\n\r\n  isInfected(): boolean {\r\n    return this.state === Constants.INFECTED;\r\n  }\r\n\r\n  canInfectOthers(): boolean {\r\n    return this.state === Constants.EXPOSED || this.state === Constants.INFECTED;\r\n  }\r\n\r\n  isRemoved(): boolean {\r\n    return this.state === Constants.REMOVED;\r\n  }\r\n\r\n  isDead(): boolean {\r\n    return this.state === Constants.DEAD;\r\n  }\r\n\r\n  isAllowedToBeRemoved(): boolean {\r\n    return !this.linked;\r\n  }\r\n\r\n  _setState(state: number) {\r\n    this.state = state;\r\n  }\r\n\r\n  setNextState(state: number) {\r\n    this.nextState = state;\r\n  }\r\n\r\n  setSusceptible() {\r\n    this._setState(Constants.SUSCEPTIBLE)\r\n  }\r\n\r\n  setExposed() {\r\n    this._setState(Constants.EXPOSED)\r\n  }\r\n\r\n  setInfected() {\r\n    this._setState(Constants.INFECTED)\r\n  }\r\n\r\n  setRemoved() {\r\n    this._setState(Constants.REMOVED)\r\n  }\r\n\r\n  setDead() {\r\n    this._setState(Constants.DEAD)\r\n  }\r\n\r\n  startDay() {\r\n    this.nextState = this.state\r\n  }\r\n\r\n  setInQuarentine() {\r\n    this._setState(Constants.QUARENTINE)\r\n  }\r\n\r\n  isIsolating(): boolean {\r\n    return this.isolating;\r\n  }\r\n\r\n  isInQuarentine(): boolean {\r\n    return this.quarentine;\r\n  }\r\n\r\n\r\n  tryToInfect(neighbor: GridNode, transProb: number) {\r\n    if (!neighbor.isSusceptible()) {\r\n      // Can't get infected\r\n      return;\r\n    }\r\n\r\n    // Test to see if neighbor should get active\r\n    let infect = this.rng.random() < transProb;\r\n    if (infect) {\r\n      let actuallyInfect = true;\r\n      if (actuallyInfect) {\r\n        neighbor.setNextState(Constants.EXPOSED);\r\n      }\r\n    }\r\n  }\r\n\r\n  maybeIsolate(chanceOfIsolationAfterSymptoms: number) {\r\n    if (this.rng.random() < chanceOfIsolationAfterSymptoms) {\r\n      this.isolating = true;\r\n    }\r\n  }\r\n\r\n  endDay(overHospitalCapacity: boolean,\r\n         daysIncubating: number,\r\n         daysSymptomatic: number,\r\n         allowDeaths: boolean,\r\n         deathRate: number,\r\n         chanceOfIsolationAfterSymptoms: number) {\r\n\r\n    if (this.nextState !== this.state) {\r\n      if (this.nextState === Constants.EXPOSED && daysIncubating === 0) {\r\n        this.nextState = Constants.INFECTED;\r\n        this.maybeIsolate(chanceOfIsolationAfterSymptoms);\r\n      }\r\n\r\n      this._setState(this.nextState);\r\n      this.daysInState = 0;\r\n    } else {\r\n      this.daysInState++;\r\n\r\n      if (this.isExposed()) {\r\n        if (this.daysInState >= daysIncubating) {\r\n          this.setInfected();\r\n          this.maybeIsolate(chanceOfIsolationAfterSymptoms);\r\n          this.daysInState = 0;\r\n        }\r\n      } else if (this.isInfected()) {\r\n        if (this.daysInState >= daysSymptomatic) {\r\n          if (overHospitalCapacity) {\r\n            deathRate = deathRate * 2;\r\n          }\r\n          if (!allowDeaths) {\r\n            deathRate = 0;\r\n          }\r\n\r\n          if (this.rng.random() < deathRate) {\r\n            this.setDead();\r\n          } else {\r\n            this.setRemoved();\r\n          }\r\n\r\n          this.daysInState = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {withStyles} from \"@material-ui/core\";\r\n\r\n\r\ntype Props = {\r\n  highlighted?: boolean,\r\n  onClick: Function,\r\n  size?: string,\r\n}\r\n\r\nconst StyledButton = withStyles({\r\n  root: {\r\n    background: 'linear-gradient(0deg, #f0f0f0 30%, #f8f8f8 90%)',\r\n    // borderRadius: 3,\r\n    // border: 0,\r\n    // color: 'white',\r\n    // height: 48,\r\n    // padding: '0 30px',\r\n    // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  },\r\n  label: {\r\n    textTransform: 'capitalize',\r\n  },\r\n})(Button);\r\n\r\nconst HighlightedButton = withStyles({\r\n  root: {\r\n    background: 'linear-gradient(0deg, #ccddff 30%, #ddeeff 90%)',\r\n    // borderRadius: 3,\r\n    // border: 0,\r\n    // color: 'white',\r\n    // height: 48,\r\n    // padding: '0 30px',\r\n    // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  },\r\n  label: {\r\n    textTransform: 'capitalize',\r\n  },\r\n})(StyledButton);\r\n\r\nexport default class WidgetButton extends React.PureComponent<Props> {\r\n  render() {\r\n    let sty = {\r\n      margin: '0.5rem',\r\n    };\r\n    if (this.props.size === \"small\") {\r\n      sty = {\r\n        margin: '0.5rem',\r\n        maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'\r\n      };\r\n    }\r\n\r\n    if (this.props.highlighted) {\r\n      return (\r\n        <HighlightedButton variant=\"contained\"\r\n                      onClick={(e) => { e.preventDefault(); this.props.onClick(e); } }\r\n                      style={sty}>\r\n          {this.props.children}\r\n        </HighlightedButton>\r\n      )\r\n    } else {\r\n      return (\r\n        <StyledButton variant=\"contained\"\r\n                      onClick={(e) => { e.preventDefault(); this.props.onClick(e); } }\r\n                      style={sty}>\r\n          {this.props.children}\r\n        </StyledButton>\r\n      )\r\n    }\r\n  }\r\n}","import React, {Component} from \"react\";\r\nimport Constants from \"./Constants\";\r\n\r\n\r\nexport default class NodeLegend extends Component<{type: string}> {\r\n  render() {\r\n    let color = Constants.SUSCEPTIBLE_COLOR;\r\n    if (this.props.type === 'exposed') {\r\n      color = Constants.EXPOSED_COLOR;\r\n    } else if (this.props.type === 'infected') {\r\n      color = Constants.INFECTED_COLOR;\r\n    } else if (this.props.type === 'removed') {\r\n      color = Constants.REMOVED_COLOR;\r\n    } else if (this.props.type === 'dead') {\r\n      color = Constants.DEAD_COLOR;\r\n    }\r\n    return <div style={{marginBottom: \"-2px\", border: \"1px black solid\", width: \"1rem\", height: \"1rem\", backgroundColor: color, display: \"inline-block\"}}/>;\r\n  }\r\n}","import {Component} from \"react\";\r\nimport React from \"react\";\r\nimport Constants from \"./Constants\";\r\nimport WidgetButton from \"./WidgetButton\"\r\nimport NodeLegend from \"./NodeLegend\"\r\n\r\n\r\ntype Props = {\r\n  hospitalCapacity: number,\r\n  capacityPerDay: number[],\r\n  deadPerDay: number[],\r\n  infectedPerDay: number[],\r\n  population: number,\r\n  recoveredPerDay: number[],\r\n  showDeaths: boolean,\r\n}\r\n\r\ntype State = {\r\n  showDead: boolean,\r\n  showInfected: boolean,\r\n  showRecovered: boolean,\r\n}\r\n\r\nconst REMOVED_COLOR = '#A8A8A8';\r\n\r\nexport default class Plot extends Component<Props, State> {\r\n\r\n  width: number;\r\n  height: number;\r\n\r\n  maxDay: number;\r\n  maxValue: number;\r\n\r\n  canvasRef: any;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.width = null;\r\n    this.height = 150;\r\n\r\n    this.canvasRef = React.createRef();\r\n\r\n    this.state = {\r\n      showDead: true,\r\n      showInfected: true,\r\n      showRecovered: true,\r\n    }\r\n\r\n    this.componentWillReceiveProps(props);\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    let idealWidth = 600;\r\n    let maxWidth = Math.min(idealWidth, document.documentElement.clientWidth - 60);\r\n\r\n    if (this.width !== maxWidth) {\r\n      this.width = maxWidth;\r\n      this.redraw();\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: Props, nextContext: any): void {\r\n    this.updateMaxValues(nextProps)\r\n  }\r\n\r\n  updateMaxValues(nextProps: Props): void {\r\n    this.maxValue = 1;\r\n\r\n    let serieses = [];\r\n    if (this.state.showInfected) {\r\n      serieses.push(nextProps.infectedPerDay);\r\n    }\r\n    if (this.state.showRecovered) {\r\n      serieses.push(nextProps.recoveredPerDay);\r\n    }\r\n    if (this.state.showDead) {\r\n      serieses.push(nextProps.deadPerDay);\r\n    }\r\n    if (nextProps.hospitalCapacity > -1) {\r\n      serieses.push(nextProps.capacityPerDay);\r\n    }\r\n\r\n    for (let i = 0; i < nextProps.infectedPerDay.length; i++) {\r\n      for (let series of serieses) {\r\n        let v = series[i];\r\n        if (v !== null && v > this.maxValue) {\r\n          this.maxValue = v;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.maxValue *= 1.1;\r\n\r\n    this.maxValue = this.props.population;\r\n\r\n    this.maxDay = Math.max(nextProps.infectedPerDay.length - 1, 1);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas = this.canvasRef.current;\r\n\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n\r\n    this.redraw();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  showHospitalCapacity(): boolean {\r\n    return this.props.hospitalCapacity > -1;\r\n  }\r\n\r\n  redraw() {\r\n    if (this.canvas === null || this.canvas === undefined) {\r\n      return;\r\n    }\r\n\r\n    this.updateMaxValues(this.props);\r\n\r\n    let context = this.canvas.getContext('2d');\r\n\r\n    context.fillStyle = Constants.SUSCEPTIBLE_COLOR;\r\n    context.fillRect(0, 0, this.width, this.height);\r\n\r\n    context.setLineDash([]);\r\n    context.lineWidth = 2;\r\n\r\n    let zerosPath = [];\r\n    let infectedPath = [];\r\n    let recoveredPath = [];\r\n    let deadPath = [];\r\n    let topPath = [];\r\n    let capacityPath = [];\r\n\r\n    for (let i = 0; i < this.props.infectedPerDay.length; i++) {\r\n      let day = i;\r\n      let infected = this.props.infectedPerDay[day];\r\n      let recovered = this.props.recoveredPerDay[day];\r\n      let dead = this.props.deadPerDay[day];\r\n      let susceptible = this.props.population - infected - recovered - dead;\r\n      let capacity = this.props.capacityPerDay[day];\r\n      if (infected === null) {\r\n        // this.drawPath(zerosPath, infectedPath, context, Constants.INFECTED_COLOR);\r\n        // this.drawPath(recoveredPath, deadPath, context, REMOVED_COLOR);\r\n        // this.drawPath(deadPath, topPath, context, Constants.DEAD_COLOR);\r\n        this.drawPath(zerosPath, infectedPath, context, Constants.INFECTED_COLOR);\r\n        this.drawPath(infectedPath, recoveredPath, context, REMOVED_COLOR);\r\n        this.drawPath(recoveredPath, deadPath, context, Constants.DEAD_COLOR);\r\n        if (this.showHospitalCapacity()) {\r\n          this.drawPath(capacityPath, capacityPath, context, '#000');\r\n        }\r\n        zerosPath.length = 0;\r\n        infectedPath.length = 0;\r\n        recoveredPath.length = 0;\r\n        deadPath.length = 0;\r\n        topPath.length = 0;\r\n        capacityPath.length = 0;\r\n      } else {\r\n        zerosPath.push([this.xcoord(day), this.ycoord(0)]);\r\n        infectedPath.push([this.xcoord(day), this.ycoord(infected)]);\r\n        recoveredPath.push([this.xcoord(day), this.ycoord(infected+recovered)]);\r\n        deadPath.push([this.xcoord(day), this.ycoord(infected+recovered+dead)]);\r\n        topPath.push([this.xcoord(day), this.ycoord(this.maxValue)]);\r\n        capacityPath.push([this.xcoord(day), this.ycoord(capacity)]);\r\n      }\r\n    }\r\n    this.drawPath(zerosPath, infectedPath, context, Constants.INFECTED_COLOR);\r\n    this.drawPath(infectedPath, recoveredPath, context, REMOVED_COLOR);\r\n    this.drawPath(recoveredPath, deadPath, context, Constants.DEAD_COLOR);\r\n\r\n    if (this.showHospitalCapacity()) {\r\n      this.drawPath(capacityPath, capacityPath, context, '#000');\r\n    }\r\n\r\n    for (let i = 0; i < this.props.infectedPerDay.length; i++) {\r\n      let day = i;\r\n      let infected = this.props.infectedPerDay[day];\r\n\r\n      if (infected === null) {\r\n        context.strokeStyle = '#000';\r\n        context.lineWidth = 2;\r\n        context.setLineDash([5, 5]);\r\n        this.drawLine(context, day-1, 0, day-1, this.maxValue);\r\n      }\r\n    }\r\n\r\n    // if (this.showHospitalCapacity()) {\r\n    //   context.strokeStyle = '#000';\r\n    //   context.setLineDash([5, 5]);\r\n    //   context.lineWidth = 1;\r\n    //   this.drawLine(context, 0, this.props.hospitalCapacity, this.maxDay, this.props.hospitalCapacity);\r\n    // }\r\n\r\n    context.strokeStyle = '#000';\r\n    context.setLineDash([]);\r\n    context.lineWidth = 1;\r\n    this.drawLine(context, 0, 0, 0, this.maxValue);\r\n    this.drawLine(context, 0, 0, this.maxDay, 0);\r\n  }\r\n\r\n  drawPath(fwdpath: number[][], backpath: number[][], context, color) {\r\n    if (fwdpath.length === 0) {\r\n      return;\r\n    }\r\n\r\n    context.beginPath();\r\n    context.moveTo(fwdpath[0][0], fwdpath[0][1]);\r\n    for (let i = 0; i < fwdpath.length; i++) {\r\n      context.lineTo(fwdpath[i][0], fwdpath[i][1]);\r\n    }\r\n    if (fwdpath !== backpath) {\r\n      for (let i = backpath.length - 1; i >= 0; i--) {\r\n        context.lineTo(backpath[i][0], backpath[i][1]);\r\n      }\r\n    }\r\n\r\n    if (fwdpath === backpath) {\r\n      context.strokeStyle = color;\r\n      context.lineWidth = 2;\r\n      context.setLineDash([5, 5]);\r\n      context.stroke();\r\n    } else {\r\n      context.fillStyle = color;\r\n      context.fill();\r\n    }\r\n  }\r\n\r\n  drawSeries(series: number[], context) {\r\n    for (let i = 1; i < series.length; i++) {\r\n      let day1 = i - 1\r\n      let day2 = i\r\n      let value1 = series[day1]\r\n      let value2 = series[day2]\r\n      if (value1 === null || value2 === null) {\r\n        continue;\r\n      }\r\n      this.drawLine(context, day1, value1, day2, value2);\r\n    }\r\n  }\r\n\r\n  xcoord(day: number): number {\r\n    return this.width * day / this.maxDay;\r\n  }\r\n\r\n  ycoord(value: number): number {\r\n    return (this.height-1) * (1 - value / this.maxValue);\r\n  }\r\n\r\n  drawBar(context: any, day1: number, value1: number, day2: number, value2: number) {\r\n    let x1 = this.xcoord(day1);\r\n    let x2 = this.xcoord(day2);\r\n    let y1 = this.ycoord(value1);\r\n    let y2 = this.ycoord(value2);\r\n    context.fillRect(x1, y1, x2-x1, y2-y1);\r\n  }\r\n\r\n  drawLine(context: any, day1: number, value1: number, day2: number, value2: number) {\r\n    context.beginPath();\r\n    context.moveTo(this.xcoord(day1), this.ycoord(value1));\r\n    context.lineTo(this.xcoord(day2), this.ycoord(value2));\r\n    context.stroke();\r\n  }\r\n\r\n  resetArrays() {\r\n    this.props.capacityPerDay.length = 0;\r\n    this.props.deadPerDay.length = 0;\r\n    this.props.infectedPerDay.length = 0;\r\n    this.props.recoveredPerDay.length = 0;\r\n\r\n    this.redraw();\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n    this.redraw();\r\n\r\n    let infectedPercent = Math.round(this.props.infectedPerDay[this.props.infectedPerDay.length - 1] / this.props.population * 100);\r\n    let recoveredPercent = Math.round(this.props.recoveredPerDay[this.props.recoveredPerDay.length - 1] / this.props.population * 100);\r\n    let deadPercent = Math.round(this.props.deadPerDay[this.props.deadPerDay.length - 1] / this.props.population * 100);\r\n\r\n    if (isNaN(infectedPercent)) {\r\n      infectedPercent = 0;\r\n    }\r\n    if (isNaN(recoveredPercent)) {\r\n      recoveredPercent = 0;\r\n    }\r\n    if (isNaN(deadPercent)) {\r\n      deadPercent = 0;\r\n    }\r\n\r\n    // let infectedCB = <label><input type=\"checkbox\" checked={this.state.showInfected} onChange={(e) => this.setState({showInfected: e.target.checked})}/> Infected: {infectedPercent}%</label>\r\n    let infectedCB = <span><NodeLegend type=\"infected\"/> &nbsp;Infected: {infectedPercent}%</span>\r\n\r\n    // let recoveredCB = <label><input type=\"checkbox\" checked={this.state.showRecovered} onChange={(e) => this.setState({showRecovered: e.target.checked})}/> Recovered: {recoveredPercent}%</label>\r\n    let recoveredCB = <span><NodeLegend type=\"removed\"/> &nbsp;Recovered: {recoveredPercent}%</span>\r\n\r\n    let deadCB = null;\r\n    if (this.props.showDeaths) {\r\n      // deadCB = <label><input type=\"checkbox\" checked={this.state.showDead} onChange={(e) => this.setState({showDead: e.target.checked})}/> Dead: {deadPercent}%</label>\r\n      deadCB = <span><NodeLegend type=\"dead\"/> <span style={{backgroundColor: '#FFA'}}>&nbsp;Dead: {deadPercent}%&nbsp;</span></span>\r\n    }\r\n\r\n    let widthToUse = this.width;\r\n    if (widthToUse === null) {\r\n      widthToUse = 300;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"plot-container\">\r\n          {/* <div className=\"plot-yaxis\">population</div> */}\r\n          <div className=\"plot-chart\">\r\n            <canvas className=\"canvas\" ref={this.canvasRef} width={widthToUse} height={this.height} />\r\n          </div>\r\n          <div className=\"plot-xaxis\">time ⟶</div>\r\n          {/* <div className=\"plot-legend\">\r\n            <div className=\"plot-legend-button\">\r\n              <WidgetButton onClick={() => {this.resetArrays()}}>Clear</WidgetButton>\r\n            </div>\r\n            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n              <div>{infectedCB}</div>\r\n              <div>{recoveredCB}</div>\r\n              <div>{deadCB}</div>\r\n            </div>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import { Oscillator, Gain, Master } from \"tone\";\r\n\r\nexport default class Synth {\r\n\r\n    constructor(NumberOfOscillators) {\r\n\r\n        this.oscillators = [];\r\n        for (let index = 0; index < NumberOfOscillators; index++) {\r\n            let osc = new Oscillator;\r\n            this.oscillators.push(osc);\r\n        }\r\n\r\n        this.oscillatorsGain = [];\r\n        for (let index = 0; index < NumberOfOscillators; index++) {\r\n            let gain = new Gain;\r\n            this.oscillatorsGain.push(gain);\r\n        }\r\n\r\n        this.masterGain = new Gain();\r\n\r\n        // Connect Oscillators to Gains and then to master Gain\r\n        this.oscillators.map(\r\n            (osc, index) => {\r\n                this.oscillators[index].connect(this.oscillatorsGain[index]);\r\n                this.oscillatorsGain[index].connect(this.masterGain);\r\n                this.oscillatorsGain[index].gain.value = 0.2;\r\n            }\r\n        );\r\n\r\n        this.masterGain.gain.value = 1/this.oscillators.length;\r\n        \r\n\r\n    }\r\n\r\n    connect() {\r\n        this.masterGain.connect(Master);\r\n    }\r\n\r\n    disconnect() {\r\n        this.masterGain.disconnect();\r\n    }\r\n\r\n    start() {\r\n        this.oscillators.forEach( osc => osc.start() );\r\n    }\r\n\r\n    stop() {\r\n        this.oscillators.forEach( osc => osc.stop() );\r\n    }\r\n\r\n    setFrequency(freq, glideTime) {\r\n        this.oscillators.forEach(\r\n            (osc, index) => {\r\n                if (Math.random() < 0.01) {\r\n                    osc.frequency.exponentialRampToValueAtTime(freq[index],\"+\"+glideTime.toString());\r\n                } else {\r\n                    osc.frequency.value = freq[index];\r\n                }\r\n                // osc.frequency.exponentialRampToValueAtTime(freq[index],\"+\"+glideTime.toString());\r\n                // osc.frequency.value = freq[index];\r\n            }\r\n        )\r\n    }\r\n\r\n    setOscType(oscTypeList) {\r\n        this.oscillators.forEach(\r\n            (osc, index) => {\r\n                osc.type = oscTypeList[index];\r\n            }\r\n        )\r\n    }\r\n\r\n    setOscGain(oscGainList) {\r\n        this.oscillatorsGain.forEach(\r\n            (osc, index) => {\r\n                osc.gain.value = oscGainList[index];\r\n            }\r\n        )\r\n    }\r\n\r\n}","// @flow\r\n\r\nimport React, {Component} from 'react';\r\nimport '../App.css';\r\nimport Utils from \"../Utils\";\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport {RNG} from \"../RNG\";\r\nimport Interval from \"./Interval\";\r\nimport {GridNode} from \"./Models\";\r\nimport Colors from \"../Colors\";\r\nimport Waypoint from \"react-waypoint\";\r\nimport WidgetButton from \"./WidgetButton\";\r\nimport Plot from \"./Plot\"\r\nimport Constants from \"./Constants\";\r\nimport NodeLegend from \"./NodeLegend\";\r\nimport Synth from \"./Synth\";\r\nimport Oscillator from 'tone';\r\n\r\n\r\n\r\ntype Props = {\r\n  randomSeed?: number,\r\n\r\n  // Network\r\n  addCities?: boolean,\r\n  addLinkedNodes?: boolean,\r\n  gridCols?: number,\r\n  gridRows?: number,\r\n\r\n  // Simulation parameters\r\n  daysIncubating?: number,\r\n  daysSymptomatic?: number,\r\n  deathRate?: number,\r\n  decreaseInEncountersAfterSymptoms?: number,\r\n  chanceOfIsolationAfterSymptoms?: number,\r\n  hospitalCapacityPct?: number,\r\n  immunityFraction?: number,\r\n  maxActiveNodes?: number,\r\n  maxIterations?: number,\r\n  personHours?: number,\r\n  transmissionProbability?: number,\r\n  travelRadius?: number,\r\n\r\n  // Rendering parameters\r\n  drawNodeOutlines?: boolean,\r\n  nodeSize?: number,\r\n  speed?: number,\r\n\r\n  // Controls\r\n  highlight?: string,\r\n  immunitySliderName?: string,\r\n  maxTransmissionRate?: number,\r\n  showAliveFraction?: boolean,\r\n  showAllControls?: boolean,\r\n  showDaysPerStateControls?: boolean,\r\n  showDeaths?: boolean,\r\n  showDeathRateSlider?: boolean,\r\n  showDecreaseInEncountersAfterSymptomsSlider?: boolean,\r\n  showChanceOfIsolationAfterSymptomsSlider?: boolean,\r\n  showDegreeSlider?: boolean,\r\n  showHospitalCapacitySlider?: boolean,\r\n  showImmunityFractionSlider?: boolean,\r\n  showInteractions?: boolean,\r\n  showPersonHoursSlider?: boolean,\r\n  showPlaybackControls?: boolean,\r\n  showProTip?: boolean,\r\n  showSimulationButtons?: boolean,\r\n  showSpeedControls?: boolean,\r\n  showTransmissionProbabilitySlider?: boolean,\r\n  showTravelRadiusSlider?: boolean,\r\n}\r\n\r\ntype State = {\r\n  numActiveNodes: number,\r\n  playing: boolean,\r\n  visible: boolean,\r\n\r\n  // Network\r\n\r\n  // Simulation\r\n  daysIncubating: number,\r\n  daysSymptomatic: number,\r\n  deathRate: number,\r\n  decreaseInEncountersAfterSymptoms: number,\r\n  chanceOfIsolationAfterSymptoms: number,\r\n  hospitalCapacityPct: number,\r\n  immunityFraction: number,\r\n  longDistaceNetworkActive: boolean,\r\n  maxIterations: number,\r\n  personHours: number,\r\n  transmissionProbability: number,\r\n  travelRadius: number,\r\n\r\n  // Rendering\r\n  centerNodeNeighborsToDisplay: GridNode[];\r\n  drawNodeOutlines: boolean,\r\n  gridWidth: number,\r\n  hospitalCapacitySliderHighlighted: boolean,\r\n  nodeSize: number,\r\n  speed: number,  // between 0 and 1\r\n\r\n  // Outcomes\r\n  capacityPerDay: number[],\r\n  deadPerDay: number[],\r\n  infectedPerDay: number[],\r\n  recoveredPerDay: number[],\r\n}\r\n\r\nexport default class Grid extends Component<Props, State> {\r\n  // noinspection DuplicatedCode\r\n  static NEIGHBOR_CLASSES = [\r\n      [[0, 0]],\r\n      [[-1, 0], [1, 0], [0, -1], [0, 1]],\r\n      [[-1, -1], [-1, 1], [1, -1], [1, 1]],\r\n      [[-2, -2], [-2, -1], [-2, 0], [-2, 1], [-2, 2], [-1, 2], [0, 2], [1, 2], [2, 2], [2, 1], [2, 0], [2, -1], [2, -2], [1, -2], [0, -2], [-1, -2]],\r\n  ];\r\n\r\n  // Set default props\r\n  static defaultProps = {\r\n    randomSeed: -1,\r\n\r\n    // Network\r\n    addCities: false,\r\n    addLinkedNodes: false,\r\n    gridCols: 1,\r\n    gridRows: 1,\r\n\r\n    // Simulation parameters\r\n    daysIncubating: 5,\r\n    daysSymptomatic: 14,\r\n    deathRate: 0.032,\r\n    decreaseInEncountersAfterSymptoms: 0.25,\r\n    chanceOfIsolationAfterSymptoms: 0.25,\r\n    hospitalCapacityPct: -1,\r\n    immunityFraction: 0.1,\r\n    maxIterations: -1,\r\n    nug: 20,\r\n    personHours: 5,\r\n    transmissionProbability: 0.185,\r\n    travelRadius: 5,\r\n\r\n    // Rendering parameters\r\n    drawNodeOutlines: true,\r\n    speed: 0.5,\r\n\r\n    // Controls\r\n    immunitySliderName: \"Immunity\",\r\n    maxTransmissionRate: 1,\r\n    showAliveFraction: false,\r\n    showAllControls: false,\r\n    showDaysPerStateControls: false,\r\n    showDeaths: false,\r\n    showDecreaseInEncountersAfterSymptomsSlider: false,\r\n    showChanceOfIsolationAfterSymptomsSlider: false,\r\n    showDeathRateSlider: false,\r\n    showDegreeSlider: false,\r\n    showHospitalCapacitySlider: false,\r\n    showImmunityFractionSlider: false,\r\n    showInteractions: false,\r\n    showPersonHoursSlider: false,\r\n    showPlaybackControls: true,\r\n    showProTip: false,\r\n    showSimulationButtons: false,\r\n    showSpeedControls: false,\r\n    showTransmissionProbabilitySlider: false,\r\n    showTravelRadiusSlider: false,\r\n\r\n  };\r\n\r\n  grid: GridNode[][];\r\n  rng: RNG;\r\n\r\n  // Weird rendering parameters; don't want React trying to auto-manage these\r\n  gridWidth: number;\r\n  nodeSize: number;\r\n\r\n  canvasRef: any;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.canvasRef = React.createRef();\r\n\r\n    this.previousSimulationParams = ['foo'];\r\n\r\n    this.previousDrawingParams = [];\r\n    this.previousInteractionsParams = [];\r\n\r\n    this.onTick = this.onTick.bind(this);\r\n    this.onEnter = this.onEnter.bind(this);\r\n    this.onLeave = this.onLeave.bind(this);\r\n\r\n    \r\n    this.oscillators = new Synth(36);\r\n    this.oscillators.connect();\r\n    // this.oscillators.start();\r\n\r\n    this.initializeFromProps(this.props, true);\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n\r\n    this.frequencies = [];\r\n    let lowestFrequency = 200;\r\n    let highestFrequency = 2000;\r\n    // Create random frequencies for each of the node states\r\n    let numberOfNodeStates = Constants.DEAD + 1;\r\n    for (let i = 0; i < numberOfNodeStates; i++) {\r\n      this.frequencies.push( Math.random()*(highestFrequency-lowestFrequency) + lowestFrequency )      \r\n    }\r\n    this.frequencies = this.frequencies.sort( (a,b) => (a-b) );\r\n\r\n    //Define the type of oscillator for each cell state\r\n    // this.oscillatorType = ['sine4','sine2','triangle','square','sine','sawtooth'];\r\n    // this.oscillatorType = ['sine','sine','sine','sine','sine','sine'];\r\n    this.oscillatorType = ['sine','sine','sine','sine2','sine2','triangle'];\r\n\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    let idealWidth = this.props.gridCols * this.props.nodeSize;\r\n    if (this.props.nodeSize >= 5) {\r\n      idealWidth += this.props.gridCols;\r\n    }\r\n\r\n    let gridWidth = Math.min(idealWidth, document.documentElement.clientWidth - 40);\r\n    // let gridWidth = document.documentElement.clientWidth;\r\n    let nodeSize = Math.floor(gridWidth / this.props.gridCols);\r\n\r\n    gridWidth = nodeSize * this.props.gridCols;\r\n\r\n    if (this.gridWidth !== gridWidth || this.nodeSize !== nodeSize) {\r\n      this.gridWidth = gridWidth;\r\n      this.nodeSize = nodeSize;\r\n      this.redraw(true);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: Props, nextContext: any): void {\r\n    // this.initializeFromProps(nextProps, false);\r\n  }\r\n\r\n  initializeFromProps(props: Props, fromConstructor: boolean) {\r\n    this.gridWidth = props.gridCols * props.nodeSize;\r\n    this.nodeSize = props.nodeSize;\r\n\r\n    let randomSeed = props.randomSeed;\r\n    if (randomSeed === -1) {\r\n      randomSeed = Math.floor(Math.random() * 3000000);\r\n    }\r\n    this.rng = new RNG(randomSeed);\r\n\r\n    let state = {\r\n      numActiveNodes: 0,\r\n      playing: false,\r\n      visible: false,\r\n\r\n      // Network\r\n\r\n      // Simulation\r\n      daysIncubating: props.daysIncubating,\r\n      daysSymptomatic: props.daysSymptomatic,\r\n      deathRate: props.deathRate,\r\n      decreaseInEncountersAfterSymptoms: props.decreaseInEncountersAfterSymptoms,\r\n      chanceOfIsolationAfterSymptoms: props.chanceOfIsolationAfterSymptoms,\r\n      hospitalCapacityPct: props.hospitalCapacityPct,\r\n      immunityFraction: props.immunityFraction,\r\n      longDistaceNetworkActive: props.addLinkedNodes,\r\n      maxIterations: props.maxIterations,\r\n      personHours: props.personHours,\r\n      transmissionProbability: props.transmissionProbability,\r\n      travelRadius: props.travelRadius,\r\n\r\n      // Rendering\r\n      centerNodeNeighborsToDisplay: [],\r\n      drawNodeOutlines: props.drawNodeOutlines,\r\n      hospitalCapacitySliderHighlighted: false,\r\n      speed: props.speed,\r\n\r\n      // Outcomes\r\n      capacityPerDay: [],\r\n      deadPerDay: [],\r\n      infectedPerDay: [],\r\n      recoveredPerDay: [],\r\n    };\r\n    if (fromConstructor) {\r\n      this.state = state;\r\n    } else {\r\n      this.setState(state);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas = this.canvasRef.current;\r\n\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n\r\n    // this.regenerate();\r\n    this.redraw(true);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  onTick() {\r\n    if (this.state.playing && this.state.visible) {\r\n      this.simulateStep();\r\n      this.redraw(true);\r\n    }\r\n  }\r\n\r\n  onEnter() {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n    this.redraw(true);\r\n  }\r\n\r\n  onLeave() {\r\n    this.setState({\r\n      visible: false,\r\n    });\r\n  }\r\n\r\n  static shuffleInPlace(arr, rng: RNG) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      const j = Math.floor(rng.random() * (i + 1));\r\n      [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  regenerate() {\r\n    this.generate();\r\n    this.forceUpdate();\r\n  }\r\n\r\n  resetPlotVariables() {\r\n    this.state.capacityPerDay = [];\r\n    this.state.deadPerDay = [];\r\n    this.state.infectedPerDay = [];\r\n    this.state.recoveredPerDay = [];\r\n  }\r\n\r\n  generate(force: boolean) {\r\n    // actually regenerate iff any of the simulation parameters have changed\r\n    let currentSimulationParams = [\r\n        // this.state.immunityFraction,\r\n    ];\r\n    if (!force && Utils.arraysEqual(this.previousSimulationParams, currentSimulationParams)) {\r\n      // console.log('rejecting generate');\r\n      return;\r\n    }\r\n\r\n    this.previousSimulationParams = currentSimulationParams;\r\n\r\n    // console.log('Generating new network');\r\n\r\n\r\n    if (this.state.infectedPerDay.length > 1 && this.state.infectedPerDay[this.state.infectedPerDay.length-2] !== null) {\r\n      this.state.capacityPerDay.push(null);\r\n      this.state.deadPerDay.push(null);\r\n      this.state.infectedPerDay.push(null);\r\n      this.state.recoveredPerDay.push(null);\r\n    }\r\n    if (this.state.infectedPerDay.length === 0 || this.state.infectedPerDay[this.state.infectedPerDay.length-1] === null) {\r\n      this.state.capacityPerDay.push(this.state.hospitalCapacityPct * this.props.gridRows * this.props.gridRows);\r\n      this.state.deadPerDay.push(0);\r\n      this.state.infectedPerDay.push(this.props.nug);\r\n      this.state.recoveredPerDay.push(0);\r\n    }\r\n\r\n    this.state.centerNodeNeighborsToDisplay = [];\r\n\r\n    let nRows = this.props.gridRows;\r\n    let nCols = this.props.gridCols;\r\n\r\n    // Initialize grid\r\n    this.grid = [];\r\n    for (let r = 0; r < nRows; r++) {\r\n      let row = [];\r\n      for (let c = 0; c < nCols; c++) {\r\n        let node = new GridNode(this.rng, r, c);\r\n        // node.immune = this.rng.random() < this.state.immunityFraction;\r\n        if (Math.random() < this.state.immunityFraction) {\r\n          node.setInQuarentine()\r\n          node.quarentine = true;\r\n        };\r\n\r\n        row.push(node);\r\n      }\r\n      this.grid.push(row);\r\n    }\r\n\r\n    // Add linked nodes\r\n    // noinspection JSMismatchedCollectionQueryUpdate\r\n    let linkedNodes: Set<GridNode> = new Set();\r\n    if (this.props.addLinkedNodes) {\r\n      for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n          let r = Math.floor((nRows / 6) * (2 * i + 1));\r\n          let c = Math.floor((nCols / 6) * (2 * j + 1));\r\n          let node = this.grid[r][c];\r\n          node.linked = true;\r\n          node.setSusceptible();  // make sure it's not removed\r\n          linkedNodes.add(node);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Add cities\r\n    if (this.props.addCities) {\r\n      let cityCenters = [];\r\n      cityCenters.push([Math.floor(3/4 * nRows), Math.floor(1/4 * nCols)]);\r\n      cityCenters.push([Math.floor(1/4 * nRows), Math.floor(3/4 * nCols)]);\r\n      for (let r = 0; r < nRows; r++) {\r\n        for (let c = 0; c < nCols; c++) {\r\n          for (let center of cityCenters) {\r\n            let cr = center[0];\r\n            let cc = center[1];\r\n            let distance = Math.sqrt(Math.pow(cr - r, 2) + Math.pow(cc - c, 2));\r\n            if (distance <= 16) {\r\n              this.grid[r][c].specialDegree = 8 - Math.floor(distance/4);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Initialize nug\r\n    let centerR = Math.floor((nRows - 1) / 2);\r\n    let centerC = Math.floor((nCols - 1) / 2);\r\n    if (this.props.nug === 1) {\r\n      if (this.state.daysIncubating === 0) {\r\n        this.grid[centerR][centerC].setInfected();\r\n      } else {\r\n        this.grid[centerR][centerC].setExposed();\r\n      }\r\n    } else if (this.props.nug === 5) {\r\n      for (let dr = -1; dr <= 1; dr++) {\r\n        for (let dc = -1; dc <= 1; dc++) {\r\n          if (Math.abs(dr) === 1 && Math.abs(dc) === 1) {\r\n            continue;\r\n          }\r\n\r\n          this.grid[centerR+dr][centerC+dc].setExposed();\r\n        }\r\n      }\r\n    } else if (this.props.nug === 20) {\r\n      for (let dr = -2; dr <= 2; dr++) {\r\n        for (let dc = -2; dc <= 2; dc++) {\r\n          if (Math.abs(dr) === 2 && Math.abs(dc) === 2) {\r\n            continue;\r\n          }\r\n\r\n          this.grid[centerR+dr][centerC+dc].setExposed();\r\n        }\r\n      }\r\n    }\r\n\r\n    this.redraw(true);\r\n    this.setState({\r\n      numActiveNodes: this.props.nug,\r\n    })\r\n  }\r\n\r\n  simulateStep() {\r\n    let nRows = this.props.gridRows;\r\n    let nCols = this.props.gridCols;\r\n\r\n    // let actualRemovedCells = 0;\r\n    let linkedNodes: Set<GridNode> = new Set();\r\n\r\n    // Start day\r\n    for (let r = 0; r < nRows; r++) {\r\n      for (let c = 0; c < nCols; c++) {\r\n        let node = this.grid[r][c];\r\n        node.startDay();\r\n        if (this.state.longDistaceNetworkActive && node.linked) {\r\n          linkedNodes.add(node);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Infect\r\n    let centerNodeNeighborsToDisplay = [];\r\n    for (let r = 0; r < nRows; r++) {\r\n      for (let c = 0; c < nCols; c++) {\r\n        let node = this.grid[r][c];\r\n        if (this.props.showInteractions && this.isCenterNode(r, c) && node.canInfectOthers()) {\r\n          centerNodeNeighborsToDisplay = this.maybeInfect(node, r, c, linkedNodes);\r\n        } else {\r\n          this.maybeInfect(node, r, c, linkedNodes);\r\n        }\r\n      }\r\n    }\r\n\r\n    // End day\r\n    let actualInfectedNodes = 0;\r\n    for (let r = 0; r < nRows; r++) {\r\n      for (let c = 0; c < nCols; c++) {\r\n        let node = this.grid[r][c];\r\n        if (node.getNextState() === Constants.EXPOSED || node.getNextState() === Constants.INFECTED) {\r\n          actualInfectedNodes++;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    let chanceOfIsolationAfterSymptoms = this.state.chanceOfIsolationAfterSymptoms;\r\n    if (!this.props.showChanceOfIsolationAfterSymptomsSlider) {\r\n      chanceOfIsolationAfterSymptoms = 0;\r\n    }\r\n\r\n\r\n    let overCapacity = this.state.hospitalCapacityPct > -1 && actualInfectedNodes > this.state.hospitalCapacityPct * (nRows*nCols);\r\n    for (let r = 0; r < nRows; r++) {\r\n      for (let c = 0; c < nCols; c++) {\r\n        let node = this.grid[r][c];\r\n        node.endDay(overCapacity,\r\n            this.state.daysIncubating,\r\n            this.state.daysSymptomatic,\r\n            this.props.showDeaths,\r\n            this.state.deathRate,\r\n            chanceOfIsolationAfterSymptoms);\r\n      }\r\n    }\r\n\r\n    let actualDeadNodes = 0;\r\n    let actualRecoveredNodes = 0;\r\n    for (let r = 0; r < nRows; r++) {\r\n      for (let c = 0; c < nCols; c++) {\r\n        let node = this.grid[r][c];\r\n        if (node.getNextState() === Constants.REMOVED) {\r\n          actualRecoveredNodes++;\r\n        } else if (node.getNextState() === Constants.DEAD) {\r\n          actualDeadNodes++;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.state.capacityPerDay.push(this.state.hospitalCapacityPct * this.props.gridRows * this.props.gridRows);\r\n    this.state.deadPerDay.push(actualDeadNodes);\r\n    this.state.infectedPerDay.push(actualInfectedNodes);\r\n    this.state.recoveredPerDay.push(actualRecoveredNodes);\r\n\r\n    this.state.centerNodeNeighborsToDisplay = centerNodeNeighborsToDisplay;\r\n\r\n    // Loop over blocks of 6\r\n    let blockWidth = 10;\r\n    let numOfBlocks = 6;\r\n    let OscBlockState = [];\r\n    // let numOfBlocks = this.gridCols/blockWidth;\r\n    for (let rowBlock = 0; rowBlock < numOfBlocks; rowBlock++) {\r\n      let blockState_col = [];\r\n      for (let colBlock = 0; colBlock < numOfBlocks; colBlock++) {\r\n        \r\n        // let blockState = {\r\n        //   x: 0,\r\n        //   y: 0,\r\n        //   susceptible: 0,\r\n        //   quarantine: 0,\r\n        //   exposed: 0,\r\n        //   infected: 0,\r\n        //   removed: 0,\r\n        //   dead: 0,\r\n        // }\r\n\r\n        let blockState = [...new Array(6)].map( () => 0 );\r\n\r\n        // Iterate over the elements inside the block\r\n        for (let rowInBlock = 0; rowInBlock < blockWidth; rowInBlock++) {\r\n          for (let colInBlock = 0; colInBlock < blockWidth; colInBlock++) {\r\n\r\n            let r = rowBlock*blockWidth + rowInBlock;\r\n            let c = colBlock*blockWidth + colInBlock;\r\n            let node = this.grid[r][c];\r\n            \r\n            if (node.getNextState() === Constants.SUSCEPTIBLE) {\r\n              blockState[Constants.SUSCEPTIBLE]++;\r\n            } else if (node.getNextState() === Constants.QUARENTINE) {\r\n              blockState[Constants.QUARENTINE]++;\r\n            } else if (node.getNextState() === Constants.EXPOSED) {\r\n              blockState[Constants.EXPOSED]++;\r\n            } else if (node.getNextState() === Constants.INFECTED) {\r\n              blockState[Constants.INFECTED]++;\r\n            } else if (node.getNextState() === Constants.REMOVED) {\r\n              blockState[Constants.REMOVED]++;\r\n            } else if (node.getNextState() === Constants.DEAD) {\r\n              blockState[Constants.DEAD]++;\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n        OscBlockState.push(blockState);\r\n\r\n      }\r\n\r\n    }\r\n\r\n    this.updateOscillators(OscBlockState);\r\n\r\n    // Autoplay: regenerates itself when done\r\n    if (actualInfectedNodes === 0) {\r\n      this.generate(true);\r\n      this.forceUpdate(); \r\n      this.resetPlotVariables();\r\n\r\n      this.frequencies = [];\r\n      let lowestFrequency = 200;\r\n      let highestFrequency = 2000;\r\n      // Create random frequencies for each of the node states\r\n      let numberOfNodeStates = Constants.DEAD + 1;\r\n      for (let i = 0; i < numberOfNodeStates; i++) {\r\n        this.frequencies.push( Math.random()*(highestFrequency-lowestFrequency) + lowestFrequency )      \r\n      }\r\n\r\n    }\r\n    this.frequencies = this.frequencies.sort( (a,b) => (a-b) );\r\n\r\n\r\n\r\n    // Update the number of active nodes, and the playing bit if necessary\r\n    this.setState({\r\n      numActiveNodes: actualInfectedNodes,\r\n      // playing: this.state.playing && actualInfectedNodes !== 0,\r\n    });\r\n\r\n    this.redraw(true);\r\n\r\n  }\r\n\r\n  isCenterNode(r: number, c: number): boolean {\r\n    return r === c && r === Math.floor(this.props.gridRows / 2);\r\n  }\r\n\r\n  maybeInfect(node: GridNode, r: number, c: number, linkedNodes: Set<GridNode>): GridNode[] {\r\n    let neighbors = [];\r\n    if (node.canInfectOthers() || this.isCenterNode(r, c)) {\r\n      neighbors = this.getNeighbors(node, r, c, linkedNodes);\r\n    }\r\n\r\n    if (node.canInfectOthers()) {\r\n      let transProb = this.state.transmissionProbability;\r\n      transProb = Math.pow(transProb, 3);\r\n\r\n      for (let neighbor of neighbors) {\r\n        node.tryToInfect(neighbor, transProb);\r\n      }\r\n    }\r\n    return neighbors;\r\n  }\r\n\r\n  chooseRandomNeighbor(node: GridNode, r: number, c: number): GridNode {\r\n    let radius = this.state.travelRadius;\r\n\r\n    let neighbor = null;\r\n    while (neighbor === null) {\r\n      // let dr = this.rng.randIntBetween(-radius, radius);\r\n      // let dc = this.rng.randIntBetween(-radius, radius);\r\n      let dr = Math.floor( Math.random() * (2*radius) - radius );\r\n      let dc = Math.floor( Math.random() * (2*radius) - radius );\r\n      \r\n      if (dr === 0 && dc === 0) {\r\n        continue;\r\n      }\r\n\r\n      // special case for radius 1: only immediate neighbors\r\n      if (radius === 1) {\r\n        if (Math.abs(dr) === 1 && Math.abs(dc) === 1) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      let nr = r + dr;\r\n      let nc = c + dc;\r\n\r\n      if (nr < 0 || nr >= this.grid.length || nc < 0 || nc >= this.grid[0].length) {\r\n        continue;\r\n      }\r\n\r\n      neighbor = this.grid[nr][nc];\r\n    }\r\n    return neighbor;\r\n  }\r\n\r\n  updateOscillators(blocks: Object) {\r\n\r\n  \r\n    let oscType = []; \r\n    let oscFreqs = [];\r\n    let oscGains = [];\r\n    for (let i = 0; i < blocks.length; i++) {\r\n      const oscBlock = blocks[i];\r\n\r\n      // set the type of oscillator of each block depending on the node state with max number\r\n      const indexOfMaxValue = oscBlock.indexOf(Math.max(...oscBlock));\r\n\r\n      if (Math.random() > oscBlock[indexOfMaxValue]/100 ) {\r\n        oscType.push(this.oscillatorType[indexOfMaxValue]);\r\n      } else {\r\n        oscType.push(this.oscillatorType[0])\r\n      }\r\n\r\n      // set oscillators gain\r\n      oscGains.push(oscBlock[indexOfMaxValue]/100);\r\n\r\n      // set the oscillators frequencies\r\n      let meanFreq = 0;\r\n      for (let j = 0; j < oscBlock.length; j++) {\r\n        meanFreq += oscBlock[j]*this.frequencies[j];        \r\n      }\r\n      oscFreqs.push(meanFreq/100);\r\n      \r\n    }\r\n\r\n    console.log(oscFreqs);\r\n    this.oscillators.setOscType(oscType);\r\n    this.oscillators.setFrequency(oscFreqs, (4/10)*50*this.state.speed/1000);\r\n    this.oscillators.setOscGain(oscGains);\r\n\r\n  }\r\n\r\n  // noinspection JSUnusedLocalSymbols\r\n  getNeighbors(node: GridNode, r: number, c: number, linkedNodes: Set<GridNode>): GridNode[] {\r\n    let neighbors = [];\r\n    let personHours = this.state.personHours;\r\n    if (node.isIsolating()) {\r\n      // if (this.rng.random() < this.state.chanceOfIsolationAfterSymptoms) {\r\n      personHours *= (1-this.state.decreaseInEncountersAfterSymptoms);\r\n      // }\r\n    }\r\n    if (this.state.travelRadius === 0) {\r\n      // do nothing, just return empty list\r\n    } else if (this.state.travelRadius === 1 && personHours === 4) {\r\n      // Just the four cardinal neighbors\r\n      if (r > 0) {\r\n        neighbors.push(this.grid[r-1][c]);\r\n      }\r\n      if (c > 0) {\r\n        neighbors.push(this.grid[r][c-1]);\r\n      }\r\n      if (r < this.grid.length - 1) {\r\n        neighbors.push(this.grid[r+1][c]);\r\n      }\r\n      if (c < this.grid[0].length - 1) {\r\n        neighbors.push(this.grid[r][c+1]);\r\n      }\r\n    } else {\r\n      // Regular probabilistic neighbors\r\n      while (neighbors.length < personHours) {\r\n        let n = this.chooseRandomNeighbor(node, r, c)\r\n        neighbors.push(n)\r\n      }\r\n    }\r\n    return neighbors\r\n  }\r\n\r\n  togglePlayback() {\r\n    if (this.state.numActiveNodes === 0) {\r\n      // If network is dead, play button acts as reset + play button.\r\n      this.generate(true);\r\n      console.log(\"restarting\")\r\n    }\r\n\r\n    if (this.state.playing) {\r\n      this.oscillators.stop();\r\n      // console.log(\"sound off\");\r\n    } else if (!this.state.playing) {\r\n      this.oscillators.start();\r\n      // console.log(\"sound on\");\r\n    }\r\n\r\n    this.setState({\r\n      playing: !this.state.playing,\r\n    });\r\n\r\n  }\r\n\r\n  inInitialPosition(): boolean {\r\n    return this.state.infectedPerDay.length === 0;\r\n  }\r\n\r\n  redraw(force: boolean) {\r\n    if (this.canvas === null || this.canvas === undefined) {\r\n      console.log('no canvas');\r\n      return;\r\n    }\r\n\r\n    // actually redraw iff any of the drawing parameters have changed\r\n    let currentDrawingParams = [\r\n        this.state.drawNodeOutlines,\r\n        this.state.longDistaceNetworkActive,\r\n        this.state.personHours,\r\n        this.state.travelRadius,\r\n    ];\r\n    if (!force && Utils.arraysEqual(this.previousDrawingParams, currentDrawingParams)) {\r\n      // console.log('no draw');\r\n      return;\r\n    }\r\n    this.previousDrawingParams = currentDrawingParams;\r\n\r\n\r\n    // actually redraw iff any of the drawing parameters have changed\r\n    let showInteractionsParams = [\r\n        this.state.personHours,\r\n        this.state.travelRadius,\r\n    ];\r\n    let interactionsParamsChanged = !Utils.arraysEqual(this.previousInteractionsParams, showInteractionsParams);\r\n    this.previousInteractionsParams = showInteractionsParams;\r\n\r\n\r\n    // console.log('redrawing...');\r\n\r\n    let context = this.canvas.getContext('2d');\r\n    context.fillStyle = '#EEE';\r\n    context.fillRect(0, 0, this.gridWidth, this.gridWidth);\r\n\r\n    for (let r = 0; r < this.grid.length; r++) {\r\n      for (let c = 0; c < this.grid[r].length; c++) {\r\n        let node = this.grid[r][c];\r\n        this.drawCell(r, c, node, context, false);\r\n      }\r\n    }\r\n\r\n    // if (this.props.showInteractions &&\r\n    //     this.state.centerNodeNeighborsToDisplay &&\r\n    //     this.state.centerNodeNeighborsToDisplay.length > 0) {\r\n    if (this.props.showInteractions && (interactionsParamsChanged || this.inInitialPosition())) {\r\n      let centerR = Math.floor(this.props.gridRows / 2);\r\n      let centerC = centerR;\r\n\r\n      let centerNode = this.grid[centerR][centerC];\r\n\r\n      // let neighbors = this.state.centerNodeNeighborsToDisplay;\r\n      let neighbors = this.getNeighbors(centerNode, centerR, centerC, null);\r\n\r\n      // this.drawCell(centerR, centerC, centerNode, context, true);\r\n      for (let node of neighbors) {\r\n        this.drawCell(node.r, node.c, node, context, true);\r\n      }\r\n      for (let node of neighbors) {\r\n        this.drawInteraction(centerR, centerC, node.r, node.c, context)\r\n      }\r\n    }\r\n  }\r\n\r\n  drawInteraction(r1: number, c1: number, r2: number, c2: number, context) {\r\n    let w = this.nodeSize;\r\n\r\n    context.strokeStyle = '#000';\r\n    context.beginPath();\r\n    context.moveTo((c1 + 0.5) * w, (r1 + 0.5) * w);\r\n    context.lineTo((c2 + 0.5) * w, (r2 + 0.5) * w);\r\n    context.stroke();\r\n  }\r\n\r\n  drawCell(r: number, c: number, node: GridNode, context, highlight: boolean) {\r\n    let w = this.nodeSize;\r\n    let y = r * w;\r\n    let x = c * w;\r\n\r\n    if (node.isExposed()) {\r\n      context.fillStyle = Constants.EXPOSED_COLOR;\r\n    } else if (node.isInfected()) {\r\n      if (node.isIsolating()) {\r\n        context.fillStyle = Constants.ISOLATING_COLOR;\r\n      } else {\r\n        context.fillStyle = Constants.INFECTED_COLOR;\r\n      }\r\n    } else if (node.isRemoved()) {\r\n      context.fillStyle = Constants.REMOVED_COLOR;\r\n    } else if (node.isDead()) {\r\n      context.fillStyle = Constants.DEAD_COLOR;\r\n    } else if (node.isInQuarentine()) {\r\n      context.fillStyle = Constants.QUARENTINE_COLOR;\r\n    } else {\r\n      // Node is susceptible\r\n      context.fillStyle = Constants.SUSCEPTIBLE_COLOR;\r\n\r\n      if (node.specialDegree !== null) {\r\n        // should be somewhere between 4 and 8\r\n        Utils.assert(node.specialDegree >= 4 && node.specialDegree <= 8, \"node.specialDegree should be between 4 and 8; was: \" + node.specialDegree);\r\n        let intensity = (node.specialDegree - 4) / 4.0;\r\n        context.fillStyle = Colors.hex(Colors.blend(Colors.makeHex(Grid.SUSCEPTIBLE_COLOR), Colors.makeHex('#BBB'), intensity))\r\n      }\r\n    }\r\n\r\n    let gap = 1;\r\n    // if (this.nodeSize < 5 || this.nodeSize < this.props.nodeSize) {\r\n    //   gap = 0;\r\n    // }\r\n\r\n    // context.fillRect(x, y, w, w);\r\n    context.fillRect(x, y, w - gap, w - gap);\r\n    \r\n    if ( node.isInQuarentine() ) {\r\n      context.strokeStyle = Constants.QUARENTINE_STROKE;\r\n      context.strokeRect(x, y, w - gap, w - gap)\r\n    }\r\n    // context.beginPath();\r\n    // context.arc(x+w/2, y+w/2, w/2-1, 0, 2 * Math.PI);\r\n    // context.fill();\r\n\r\n    if (highlight || (node.linked && this.state.longDistaceNetworkActive)) {\r\n      // context.beginPath();\r\n      context.lineWidth = 1;\r\n      context.strokeStyle = '#000';\r\n      let left = x - 0.5;\r\n      let wid = w - gap + 1;\r\n      if (x === 0) {\r\n        left = 0.5;\r\n        wid = wid - 1;\r\n      }\r\n      let top = y - 0.5;\r\n      let hei = w - gap + 1;\r\n      if (y === 0) {\r\n        top = 0.5;\r\n        hei = hei - 1;\r\n      }\r\n      // if (node.isIsolating()) {\r\n      //   context.strokeRect(left+1, top+1, wid-2, hei-2);\r\n      // } else {\r\n      context.strokeRect(left, top, wid, hei);\r\n      // }\r\n    }\r\n  }\r\n\r\n  static renderPercentage(fraction: number) {\r\n    let percent = Math.round(fraction * 100);\r\n    return <span><strong>{percent}</strong>%</span>;\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic,JSUnusedLocalSymbols\r\n  renderSlider(name: string, value: number, onChange: Function, min: number, max: number, step: number,\r\n               renderPercentage: boolean, highlighted: boolean) {\r\n    let valueStr;\r\n    if (renderPercentage === 0) {\r\n      valueStr = \"\";\r\n    } else if (renderPercentage) {\r\n      valueStr = <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Grid.renderPercentage(value)}</span>;\r\n    } else {\r\n      valueStr = <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>{Math.round(value*100)/100}</strong></span>;\r\n    }\r\n\r\n    let highlightedClass = \"\";\r\n    if (highlighted) {\r\n      highlightedClass = \" highlighted\"\r\n    }\r\n\r\n    return (\r\n      <div className=\"slider-container\">\r\n        <div className=\"slider-name\">{name}{valueStr}</div>\r\n        <div className=\"slider-slider\">\r\n          <Slider classes={{\r\n                    container: 'slider-slider-container',\r\n                    thumbIconWrapper: \"\",\r\n                  }}\r\n                  // thumb={\r\n                  //   <img\r\n                  //     alt=\"slider thumb icon\"\r\n                  //     src=\"/static/images/misc/circle.png\"\r\n                  //   />\r\n                  // }\r\n                  min={min}\r\n                  max={max}\r\n                  step={step}\r\n                  value={value}\r\n                  onChange={onChange}/>\r\n        </div>\r\n        {/*<div className=\"slider-minus\">*/}\r\n        {/*  <WidgetButton size=\"small\" onClick={() => onChange(null, Math.max(value - step, min))}><span className=\"plus-minus-button\">–</span></WidgetButton>*/}\r\n        {/*</div>*/}\r\n        {/*<div className=\"slider-plus\">*/}\r\n        {/*  <WidgetButton size=\"small\" onClick={() => onChange(null, Math.min(value + step, max))}><span className=\"plus-minus-button\">+</span></WidgetButton>*/}\r\n        {/*</div>*/}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    this.generate();\r\n    this.redraw();\r\n\r\n    let showAll = this.props.showAllControls;\r\n\r\n    let transmissionProbabilitySlider = null;\r\n    if (showAll || this.props.showTransmissionProbabilitySlider) {\r\n      transmissionProbabilitySlider =\r\n          this.renderSlider(\"Transmission rate\", this.state.transmissionProbability,\r\n              (e, value) => { this.setState({transmissionProbability: value}); },\r\n              0, this.props.maxTransmissionRate, 0.01, false, this.props.highlight === \"transmissionRate\");\r\n    }\r\n\r\n    let immunityFractionSlider = null;\r\n    if (showAll || this.props.showImmunityFractionSlider) {\r\n      let sliderName = this.props.immunitySliderName || \"Immunity\";\r\n    \r\n      immunityFractionSlider =\r\n          this.renderSlider(sliderName, this.state.immunityFraction,\r\n              (e, value) => { this.setState({immunityFraction: value}); },\r\n              0, 1, 0.01, true, this.props.highlight === \"immunity\");\r\n    }\r\n\r\n    let hospitalCapacitySlider = null;\r\n    if (showAll || this.props.showHospitalCapacitySlider) {\r\n      // decoy slider\r\n      // hospitalCapacitySlider =\r\n      //     this.renderSlider(\"Hospital capacity\", this.state.hospitalCapacityPct,\r\n      //         (e, value) => { this.setState({hospitalCapacitySliderHighlighted: true}); },\r\n      //         0, 1, 0.01, true, this.state.hospitalCapacitySliderHighlighted);\r\n      hospitalCapacitySlider =\r\n          this.renderSlider(\"Hospital capacity\", this.state.hospitalCapacityPct,\r\n              (e, value) => { this.setState({hospitalCapacityPct: value}); },\r\n              0, 1, 0.01, true, false);\r\n\r\n    }\r\n\r\n    let travelRadiusSlider = null;\r\n    if (showAll || this.props.showTravelRadiusSlider) {\r\n      travelRadiusSlider =\r\n          this.renderSlider(\"Travel radius\", this.state.travelRadius,\r\n              (e, value) => { this.setState({travelRadius: value}); },\r\n              0, Math.min(30, Math.floor(this.props.gridRows/2)), 1, false, false);\r\n    }\r\n\r\n    let personHoursSlider = null;\r\n    if (showAll || this.props.showPersonHoursSlider) {\r\n      personHoursSlider =\r\n          this.renderSlider(\"Encounters per day\", this.state.personHours,\r\n              (e, value) => { this.setState({personHours: value}); },\r\n              1, 30, 1, false, false);\r\n    }\r\n\r\n    let daysIncubatingSlider = null;\r\n    if (showAll || this.props.showDaysPerStateControls) {\r\n      daysIncubatingSlider =\r\n          this.renderSlider(\"Days in incubation\", this.state.daysIncubating,\r\n              (e, value) => { this.setState({daysIncubating: value}); },\r\n              0, 20, 1, false, false);\r\n    }\r\n\r\n    let daysSymptomaticSlider = null;\r\n    if (showAll || this.props.showDaysPerStateControls) {\r\n      daysSymptomaticSlider =\r\n          this.renderSlider(\"Days with symptoms\", this.state.daysSymptomatic,\r\n              (e, value) => { this.setState({daysSymptomatic: value}); },\r\n              1, 20, 1, false, false);\r\n    }\r\n\r\n    let chanceOfIsolationAfterSymptomsSlider = null;\r\n    if (showAll || this.props.showChanceOfIsolationAfterSymptomsSlider) {\r\n      chanceOfIsolationAfterSymptomsSlider =\r\n          this.renderSlider(\"Self-quarantine rate\", this.state.chanceOfIsolationAfterSymptoms,\r\n              (e, value) => { this.setState({chanceOfIsolationAfterSymptoms: value}); },\r\n              0, 1, 0.01, true, false);\r\n    }\r\n\r\n    let decreaseInEncountersAfterSymptomsSlider = null;\r\n    if (showAll || this.props.showDecreaseInEncountersAfterSymptomsSlider) {\r\n      decreaseInEncountersAfterSymptomsSlider =\r\n          this.renderSlider(\"Self-quarantine strictness\", this.state.decreaseInEncountersAfterSymptoms,\r\n              (e, value) => { this.setState({decreaseInEncountersAfterSymptoms: value}); },\r\n              0, 1, 0.01, true, false);\r\n    }\r\n\r\n    let deathRateSlider = null;\r\n    if (showAll || this.props.showDeathRateSlider) {\r\n      let sliderName = \"Fatality rate\";\r\n      if (this.state.hospitalCapacityPct > -1) {\r\n        sliderName = \"Input fatality rate\";\r\n      }\r\n\r\n      deathRateSlider =\r\n          this.renderSlider(sliderName, this.state.deathRate,\r\n              (e, value) => { this.setState({deathRate: value}); },\r\n              0, 0.3, 0.01, true, false);\r\n    }\r\n\r\n    let speedSlider = null;\r\n    let speedMinusButton = null;\r\n    let speedPlusButton = null;\r\n    if (showAll || this.props.showSpeedControls) {\r\n      speedMinusButton = <WidgetButton onClick={() => { this.setState({speed: Math.max(0, this.state.speed - 0.20)}) }}>🚶</WidgetButton>;\r\n      speedPlusButton = <WidgetButton onClick={() => { this.setState({speed: Math.min(1, this.state.speed + 0.20)}) }}>🏃</WidgetButton>;\r\n      speedSlider =\r\n          this.renderSlider(\"Speed\", this.state.speed,\r\n              (e, value) => { this.setState({speed: value}); },\r\n              0.0001, 1, 0.00001, 0, false);\r\n    }\r\n\r\n    let playbackControls = null;\r\n    if (showAll || this.props.showPlaybackControls) {\r\n      let newNetworkButton = <WidgetButton onClick={() => {this.setState({playing: false}); this.generate(true); this.forceUpdate(); this.resetPlotVariables(); this.oscillators.stop();} } >Reset</WidgetButton>;\r\n      \r\n      let text = <span style={{fontSize: '10pt'}}>▷</span>;\r\n      if (this.state.playing) {\r\n        text = <span><b>||</b></span>;\r\n      }\r\n      let togglePlaybackButton = <WidgetButton highlighted={!this.state.playing} onClick={() => {this.togglePlayback();  } } >{text}</WidgetButton>;\r\n      \r\n      let stepButton = <WidgetButton onClick={() => {this.simulateStep(); this.setState({playing: false}); } } >Step</WidgetButton>;\r\n\r\n      playbackControls =\r\n        <div className='playback-controls-container'>\r\n          {newNetworkButton}\r\n          {togglePlaybackButton}\r\n          {stepButton}\r\n\r\n          {/*{speedMinusButton}*/}\r\n          {/*{speedPlusButton}*/}\r\n        </div>\r\n    }\r\n\r\n    let toggleLongDistanceNetwork = null;\r\n    if (this.props.addLinkedNodes) {\r\n      let text = 'Long distance: disabled';\r\n      if (this.state.longDistaceNetworkActive) {\r\n        text = 'Long distance: enabled';\r\n      }\r\n      toggleLongDistanceNetwork = <div><span onClick={() => {this.setState({longDistaceNetworkActive: !this.state.longDistaceNetworkActive}); } } >{text}</span></div>;\r\n    }\r\n\r\n    let percentAliveSlider = null;\r\n    // if (this.props.showAliveFraction || showAll) {\r\n    //   let fractionAlive = this.state.numActiveNodes / (this.props.gridRows * this.props.gridCols);\r\n    //   // noinspection JSSuspiciousNameCombination\r\n    //   percentAliveSlider = <div>\r\n    //     <Slider style={{height: this.gridWidth, marginLeft: '0.5rem'}}\r\n    //             classes={{\r\n    //               // track: { color: 'pink', width: 50, height: 100 },\r\n    //               // thumb: { display: 'none' },\r\n    //             }}\r\n    //             min={0}\r\n    //             max={1}\r\n    //             value={fractionAlive}\r\n    //             thumb={<span/>}\r\n    //             vertical\r\n    //             />\r\n    //   </div>\r\n    // }\r\n\r\n    let protip = null;\r\n    if (this.props.showProTip) {\r\n      protip = (\r\n          <div style={{color: '#666', fontSize: '12pt', marginTop: '1em'}}>👆 Pro-tip: You can adjust sliders while the simulation is running.</div>\r\n      );\r\n    }\r\n\r\n    // let intervalMillis = 100 * (1-Math.pow(this.state.speed, 1/5));\r\n    // intervalMillis = Math.max(intervalMillis, 16);\r\n    let intervalMillis = 50*this.state.speed;\r\n\r\n    let highlightedSlider = null;\r\n    if (this.props.highlight === \"transmissionRate\") {\r\n      highlightedSlider = transmissionProbabilitySlider;\r\n      transmissionProbabilitySlider = null;\r\n    } else if (this.props.highlight === \"immunity\") {\r\n      highlightedSlider = immunityFractionSlider;\r\n      immunityFractionSlider = null;\r\n    }\r\n\r\n    let plot = null;\r\n    if (this.props.showAliveFraction) {\r\n      let population = this.props.gridRows * this.props.gridRows;\r\n      plot = <Plot hospitalCapacity={this.state.hospitalCapacityPct * population}\r\n                   capacityPerDay={this.state.capacityPerDay}\r\n                   deadPerDay={this.state.deadPerDay}\r\n                   infectedPerDay={this.state.infectedPerDay}\r\n                   population={population}\r\n                   recoveredPerDay={this.state.recoveredPerDay}\r\n                   showDeaths={this.props.showDeaths} />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"simulation-container\">\r\n\r\n        <div className=\"automata\">\r\n          <Waypoint onEnter={this.onEnter} onLeave={this.onLeave} scrollableAncestor={window}>\r\n            <canvas ref={this.canvasRef} width={this.gridWidth} height={this.gridWidth} />\r\n          </Waypoint>\r\n          {percentAliveSlider}\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n          <div style={{ height: \"0.5em\" }} />\r\n          {highlightedSlider}\r\n\r\n          {/* {hospitalCapacitySlider} */}\r\n          {/* {deathRateSlider} */}\r\n          {chanceOfIsolationAfterSymptomsSlider}\r\n          {decreaseInEncountersAfterSymptomsSlider}\r\n\r\n          {/* {personHoursSlider} */}\r\n          {travelRadiusSlider}\r\n\r\n          {transmissionProbabilitySlider}\r\n          {immunityFractionSlider}\r\n\r\n          {/* {daysIncubatingSlider} */}\r\n          {/* {daysSymptomaticSlider} */}\r\n\r\n          {/* {toggleLongDistanceNetwork} */}\r\n\r\n          {speedSlider}\r\n\r\n          {playbackControls}\r\n        </div>\r\n        \r\n        <div className=\"curve\">\r\n          {plot}  \r\n        </div>\r\n        \r\n        <div className=\"audio\"></div>\r\n\r\n        <div className=\"blankboxl\">\r\n          <span className=\"legend-text\">\r\n            Infected &nbsp;<NodeLegend type=\"infected\"/> \r\n          </span>\r\n          <span className=\"legend-text\">\r\n            Recovered &nbsp;<NodeLegend type=\"removed\"/> \r\n          </span>\r\n          <span className=\"legend-text\">\r\n            Dead &nbsp;<NodeLegend type=\"dead\"/>\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"blankboxr\"></div>\r\n\r\n        \r\n        <Interval milliseconds={intervalMillis} callback={this.onTick} />\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport Grid from \"./components/Grid\";\r\nimport Synth from \"./components/Synth\";\r\n\r\ntype Props = {\r\n}\r\n\r\ntype State = {\r\n  spoilersVisible: boolean,\r\n}\r\n\r\nclass App extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      spoilersVisible: false,\r\n    }\r\n\r\n    // this.synth = new Synth(2);\r\n    // this.synth.connect();\r\n    // this.synth.start();\r\n    // this.synth.setFrequency(440);\r\n\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  renderMainPost() {\r\n\r\n    let exposed_you = <code className=\"code-exposed\">you</code>;\r\n\r\n    let susceptible = <code className=\"code-susceptible\">Susceptible</code>;\r\n    let infected = <code className=\"code-infectious\">Infected</code>;\r\n    let recovered = <code className=\"code-removed\">Recovered</code>;\r\n    let dead = <code className=\"code-dead\">Dead</code>;\r\n    let selfQuarantined = <code className=\"code-quarantined\">Self-quarantined</code>;\r\n\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Grid gridRows={60}\r\n              gridCols={60}\r\n              // highlight=\"transmissionRate\"\r\n              hospitalCapacityPct={0.05}\r\n              nodeSize={9}\r\n              nug={5}\r\n              randomSeed={100}\r\n              showAliveFraction={true}\r\n              showAllControls={true}\r\n              showDaysPerStateControls={false}\r\n              showDeaths={true}\r\n              showTransmissionProbabilitySlider={true}\r\n              showChanceOfIsolationAfterSymptomsSlider={true}\r\n              // showPersonHoursSlider={true}\r\n              // showTransmissionProbabilitySlider={true}\r\n              // showTravelRadiusSlider={true}\r\n              speed={1}\r\n              immunityFraction={0.1}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"root-container\">\r\n          <div style={{height:\"5em\"}} />\r\n          {this.renderMainPost()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}